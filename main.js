/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/class.js":
/*!**********************!*\
  !*** ./src/class.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ VirtualKeyboard)\n/* harmony export */ });\nclass VirtualKeyboard {\r\n  constructor() {\r\n    this.elements = {\r\n      wrapper: null,\r\n      textarea: null,\r\n      keyboard: null,\r\n      keysContainer: null,\r\n      keys: [],\r\n      infoText: null,\r\n    };\r\n\r\n    this.props = {\r\n      lang: null,\r\n      textValue: '',\r\n      capsON: false,\r\n      caretPos: 0,\r\n      firstSpacePressTime: 0,\r\n      secondSpacePressTime: 0,\r\n      pressed: [],\r\n    };\r\n\r\n    this.keyLayout = {\r\n      eng: [\r\n        '`', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '=', 'Backspace',\r\n        'Tab', 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', '[', ']', '\\\\', 'DEL',\r\n        'Caps Lock', 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';', \"'\", 'Enter',\r\n        'Shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm', ',', '.', '/', '▲', 'Shift', 'En',\r\n        'Ctrl', 'Win', 'Alt', ' ', 'Alt', '◄', '▼', '►', 'Ctrl',\r\n      ],\r\n\r\n      engShift: [\r\n        '~', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '+', 'Backspace',\r\n        'Tab', 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P', '{', '}', '|', 'DEL',\r\n        'Caps Lock', 'A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', ':', '\"', 'Enter',\r\n        'Shift', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', '<', '>', '?', '▲', 'Shift', 'En',\r\n        'Ctrl', 'Win', 'Alt', ' ', 'Alt', '◄', '▼', '►', 'Ctrl',\r\n      ],\r\n\r\n      ru: [\r\n        'ё', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '=', 'Backspace',\r\n        'Tab', 'й', 'ц', 'у', 'к', 'е', 'н', 'г', 'ш', 'щ', 'з', 'х', 'ъ', '\\\\', 'DEL',\r\n        'Caps Lock', 'ф', 'ы', 'в', 'а', 'п', 'р', 'о', 'л', 'д', 'ж', 'э', 'Enter',\r\n        'Shift', 'я', 'ч', 'с', 'м', 'и', 'т', 'ь', 'б', 'ю', '.', '▲', 'Shift', 'Ру',\r\n        'Ctrl', 'Win', 'Alt', ' ', 'Alt', '◄', '▼', '►', 'Ctrl',\r\n      ],\r\n\r\n      ruShift: [\r\n        'Ё', '!', '\"', '№', ';', '%', ':', '?', '*', '(', ')', '_', '+', 'Backspace',\r\n        'Tab', 'Й', 'Ц', 'У', 'К', 'Е', 'Н', 'Г', 'Ш', 'Щ', 'З', 'Х', 'Ъ', '/', 'DEL',\r\n        'Caps Lock', 'Ф', 'Ы', 'В', 'А', 'П', 'Р', 'О', 'Л', 'Д', 'Ж', 'Э', 'Enter',\r\n        'Shift', 'Я', 'Ч', 'С', 'М', 'И', 'Т', 'Ь', 'Б', 'Ю', ',', '▲', 'Shift', 'Ру',\r\n        'Ctrl', 'Win', 'Alt', ' ', 'Alt', '◄', '▼', '►', 'Ctrl',\r\n      ],\r\n\r\n      eventCode: [\r\n        'Backquote', 'Digit1', 'Digit2', 'Digit3', 'Digit4', 'Digit5', 'Digit6', 'Digit7', 'Digit8', 'Digit9', 'Digit0', 'Minus', 'Equal', 'Backspace',\r\n        'Tab', 'KeyQ', 'KeyW', 'KeyE', 'KeyR', 'KeyT', 'KeyY', 'KeyU', 'KeyI', 'KeyO', 'KeyP', 'BracketLeft', 'BracketRight', 'Backslash', 'Delete',\r\n        'CapsLock', 'KeyA', 'KeyS', 'KeyD', 'KeyF', 'KeyG', 'KeyH', 'KeyJ', 'KeyK', 'KeyL', 'Semicolon', 'Quote', 'Enter',\r\n        'ShiftLeft', 'KeyZ', 'KeyX', 'KeyC', 'KeyV', 'KeyB', 'KeyN', 'KeyM', 'Comma', 'Period', 'Slash', 'ArrowUp', 'ShiftRight', 'En',\r\n        'ControlLeft', 'MetaLeft', 'AltLeft', 'Space', 'AltRight', 'ArrowLeft', 'ArrowDown', 'ArrowRight', 'ControlRight',\r\n      ],\r\n    };\r\n  }\r\n\r\n  setLanguage() {\r\n    switch (window.localStorage.getItem('lang')) {\r\n      case 'ru':\r\n        this.props.lang = this.keyLayout.ru;\r\n        window.localStorage.setItem('lang', 'ru');\r\n        break;\r\n      case 'eng':\r\n        this.props.lang = this.keyLayout.eng;\r\n        window.localStorage.setItem('lang', 'eng');\r\n        break;\r\n      default:\r\n        this.props.lang = this.keyLayout.eng;\r\n        window.localStorage.setItem('lang', 'eng');\r\n        break;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    this.elements.wrapper = document.createElement('div');\r\n    this.elements.wrapper.className = 'wrapper';\r\n    this.elements.textarea = document.createElement('textarea');\r\n    this.elements.textarea.className = 'textarea';\r\n    this.elements.keyboard = document.createElement('div');\r\n    this.elements.keyboard.className = 'keyboard';\r\n    this.elements.keysContainer = document.createElement('div');\r\n    this.elements.keysContainer.className = 'keys__container';\r\n    this.elements.infoText = document.createElement('p');\r\n    this.elements.infoText.className = 'infoText';\r\n    this.elements.infoText.textContent = 'Сделано в OS Windows. Смена языка - Shift + Ctrl Left. Два клика на пробел - ставится точка.';\r\n    document.body.append(this.elements.wrapper);\r\n    this.elements.wrapper.append(this.elements.textarea, this.elements.keyboard);\r\n    this.elements.wrapper.append(this.elements.infoText);\r\n    this.elements.keyboard.appendChild(this.elements.keysContainer);\r\n    this.elements.keysContainer.appendChild(this.renderKeys(this.props.lang));\r\n    this.elements.keys = this.elements.keysContainer.querySelectorAll('.keyboard__note');\r\n  }\r\n\r\n  renderKeys(lang) {\r\n    this.fragment = document.createDocumentFragment();\r\n    lang.forEach((value, index) => {\r\n      const keyElement = document.createElement('button');\r\n      keyElement.setAttribute('type', 'button');\r\n      keyElement.className = 'keyboard__note';\r\n      keyElement.textContent = value;\r\n      keyElement.id = this.keyLayout.eventCode[index];\r\n      this.fragment.appendChild(keyElement);\r\n      switch (value) {\r\n        case 'Backspace':\r\n          this.fragment.appendChild(document.createElement('br'));\r\n          keyElement.classList.add('keyboard__key-wide');\r\n          break;\r\n        case 'DEL':\r\n          this.fragment.appendChild(document.createElement('br'));\r\n          keyElement.classList.add('keyboard__key-del');\r\n          break;\r\n        case 'Enter':\r\n          this.fragment.appendChild(document.createElement('br'));\r\n          keyElement.classList.add('keyboard__key-enter');\r\n          break;\r\n        case ' ':\r\n          keyElement.classList.add('keyboard__key-space');\r\n          break;\r\n        case 'Ру':\r\n        case 'En':\r\n          this.fragment.appendChild(document.createElement('br'));\r\n          keyElement.classList.add('keyboard__keys-dark');\r\n          break;\r\n        case 'Shift':\r\n          if (keyElement.id === 'ShiftLeft') {\r\n            keyElement.classList.add('keyboard__key-wide');\r\n          } else {\r\n            keyElement.classList.add('keyboard__keys-dark');\r\n          }\r\n          break;\r\n        case 'Caps Lock':\r\n          keyElement.classList.add('keyboard__key-wide');\r\n          if (window.localStorage.getItem('lang') === 'engShift' || window.localStorage.getItem('lang') === 'ruShift') {\r\n            keyElement.classList.add('active');\r\n            this.props.capsON = true;\r\n          }\r\n          break;\r\n        case 'Tab':\r\n          keyElement.classList.add('keyboard__key-tab');\r\n          break;\r\n        case 'Ctrl':\r\n        case 'Win':\r\n        case 'Alt':\r\n        case '▲':\r\n        case '◄':\r\n        case '▼':\r\n        case '►':\r\n          keyElement.classList.add('keyboard__keys-dark');\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n    return this.fragment;\r\n  }\r\n\r\n  pushedKeys() {\r\n    document.body.addEventListener('mousedown', (event) => {\r\n      if (event.target.tagName === 'BUTTON') {\r\n        event.target.classList.add('active');\r\n        if (event.target.id === 'CapsLock' && this.props.capsON === true) {\r\n          event.target.classList.remove('active');\r\n          this.props.capsON = false;\r\n        } else if (event.target.id === 'CapsLock' && this.props.capsON === false) {\r\n          this.props.capsON = true;\r\n        }\r\n        if (event.id === 'ShiftLeft' || event.id === 'ShiftRight') {\r\n          this.upDownKeys();\r\n        }\r\n      }\r\n      this.input(event.target.textContent);\r\n      this.actions(event.target);\r\n    });\r\n    document.body.addEventListener('mouseup', (event) => {\r\n      if (event.target.tagName === 'BUTTON') {\r\n        if (event.target.id !== 'CapsLock') {\r\n          event.target.classList.remove('active');\r\n        }\r\n        if (event.target.id === 'ShiftLeft' || event.target.id === 'ShiftRight') {\r\n          this.upDownKeys();\r\n        }\r\n      }\r\n      this.getCursorPosition(document.querySelector('.textarea'));\r\n      this.setCursorPosition(document.querySelector('.textarea'));\r\n    });\r\n    document.body.addEventListener('dblclick', (event) => {\r\n      if (event.target.tagName === 'BUTTON') {\r\n        if (event.target.id === 'Space') {\r\n          this.props.textValue = `${this.props.textValue.slice(0, this.props.caretPos - 2)}.${this.props.textValue.slice(this.props.caretPos)}`;\r\n          this.addInTextArea(this.props.textValue);\r\n          this.props.caretPos -= 1;\r\n          this.setCursorPosition(document.querySelector('.textarea'));\r\n        }\r\n      }\r\n    });\r\n    document.body.addEventListener('keydown', (event) => {\r\n      event.preventDefault();\r\n      const key = document.getElementById(`${event.code}`);\r\n      if (this.keyLayout.eventCode.includes(event.code)) {\r\n        switch (event.code) {\r\n          case 'CapsLock':\r\n            if (event.repeat) {\r\n              return;\r\n            }\r\n            if (this.props.capsON === true) {\r\n              key.classList.remove('active');\r\n              this.props.capsON = false;\r\n              this.upDownKeys();\r\n            } else if (this.props.capsON === false) {\r\n              key.classList.add('active');\r\n              this.props.capsON = true;\r\n              this.upDownKeys();\r\n            }\r\n            break;\r\n          case 'ShiftLeft':\r\n          case 'ShiftRight':\r\n            if (event.repeat) {\r\n              return;\r\n            }\r\n            key.classList.add('active');\r\n            this.upDownKeys();\r\n            if (!this.props.pressed.includes(event.code)) {\r\n              this.props.pressed.push(event.code);\r\n            }\r\n            break;\r\n          case 'ControlLeft':\r\n            key.classList.add('active');\r\n            if (!this.props.pressed.includes(event.code)) {\r\n              this.props.pressed.push(event.code);\r\n            }\r\n            break;\r\n          case 'Space':\r\n            this.doubleSpace();\r\n            key.classList.add('active');\r\n            break;\r\n          default:\r\n            key.classList.add('active');\r\n            break;\r\n        }\r\n        this.input(key.textContent);\r\n      }\r\n    });\r\n    document.body.addEventListener('keyup', (event) => {\r\n      event.preventDefault();\r\n      const key = document.getElementById(`${event.code}`);\r\n      if (this.keyLayout.eventCode.includes(event.code)) {\r\n        switch (event.code) {\r\n          case 'ShiftLeft':\r\n          case 'ShiftRight':\r\n            this.upDownKeys();\r\n            this.shiftCtrlPushed();\r\n            key.classList.remove('active');\r\n            break;\r\n          case 'ControlLeft':\r\n            this.shiftCtrlPushed();\r\n            key.classList.remove('active');\r\n            break;\r\n          case 'CapsLock':\r\n            if (this.props.capsON === true) {\r\n              key.classList.add('active');\r\n            } else {\r\n              key.classList.remove('active');\r\n            }\r\n            break;\r\n          default:\r\n            key.classList.remove('active');\r\n            break;\r\n        }\r\n      }\r\n    });\r\n    document.body.addEventListener('click', (event) => {\r\n      if (event.target.tagName === 'TEXTAREA') {\r\n        this.getCursorPosition(document.querySelector('.textarea'));\r\n      }\r\n    });\r\n  }\r\n\r\n  upDownKeys() {\r\n    switch (this.props.lang) {\r\n      case this.keyLayout.eng:\r\n        this.changeButtonsLanguage(this.keyLayout.engShift);\r\n        window.localStorage.setItem('lang', 'eng');\r\n        break;\r\n      case this.keyLayout.engShift:\r\n        this.changeButtonsLanguage(this.keyLayout.eng);\r\n        window.localStorage.setItem('lang', 'eng');\r\n        break;\r\n      case this.keyLayout.ru:\r\n        this.changeButtonsLanguage(this.keyLayout.ruShift);\r\n        window.localStorage.setItem('lang', 'ru');\r\n        break;\r\n      case this.keyLayout.ruShift:\r\n        this.changeButtonsLanguage(this.keyLayout.ru);\r\n        window.localStorage.setItem('lang', 'ru');\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  changeLanguage() {\r\n    switch (this.props.lang) {\r\n      case this.keyLayout.eng:\r\n        this.changeButtonsLanguage(this.keyLayout.ru);\r\n        window.localStorage.setItem('lang', 'ru');\r\n        break;\r\n      case this.keyLayout.engShift:\r\n        this.changeButtonsLanguage(this.keyLayout.ruShift);\r\n        window.localStorage.setItem('lang', 'ru');\r\n        break;\r\n      case this.keyLayout.ru:\r\n        this.changeButtonsLanguage(this.keyLayout.eng);\r\n        window.localStorage.setItem('lang', 'eng');\r\n        break;\r\n      case this.keyLayout.ruShift:\r\n        this.changeButtonsLanguage(this.keyLayout.engShift);\r\n        window.localStorage.setItem('lang', 'eng');\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  changeButtonsLanguage(value) {\r\n    this.elements.keys.forEach((item, i) => {\r\n      const element = item;\r\n      element.textContent = value[i];\r\n    });\r\n    this.props.lang = value;\r\n    this.elements.keys = this.elements.keysContainer.querySelectorAll('.keyboard__note');\r\n  }\r\n\r\n  actions(event) {\r\n    if (event.textContent === 'En') {\r\n      this.changeLanguage();\r\n    } else if (event.textContent === 'Ру') {\r\n      this.changeLanguage();\r\n    } else if (event.id === 'ShiftLeft' || event.id === 'ShiftRight') {\r\n      this.upDownKeys();\r\n    } else if (event.id === 'CapsLock' || event.id === 'ShiftRight') {\r\n      this.upDownKeys();\r\n    }\r\n  }\r\n\r\n  input(event) {\r\n    if (event.length === 1) {\r\n      this.props.textValue = this.props.textValue.slice(0, this.props.caretPos)\r\n      + event + this.props.textValue.slice(this.props.caretPos);\r\n      this.props.caretPos += 1;\r\n    }\r\n    switch (event) {\r\n      case 'Enter':\r\n        this.props.textValue = `${this.props.textValue.slice(0, this.props.caretPos)}\\n${this.props.textValue.slice(this.props.caretPos)}`;\r\n        this.props.caretPos += 1;\r\n        break;\r\n      case 'Backspace':\r\n        if (this.props.textValue === '' || this.props.caretPos === 0) {\r\n          break;\r\n        } else {\r\n          this.props.textValue = this.props.textValue.slice(0, (this.props.caretPos - 1))\r\n          + this.props.textValue.slice(this.props.caretPos);\r\n          this.props.caretPos -= 1;\r\n          break;\r\n        }\r\n      case 'DEL':\r\n        this.props.textValue = this.props.textValue.slice(0, (this.props.caretPos))\r\n        + this.props.textValue.slice(this.props.caretPos + 1);\r\n        this.props.caretPos += 0;\r\n        break;\r\n      case 'Tab':\r\n        this.props.textValue = `${this.props.textValue.slice(0, this.props.caretPos)}    ${this.props.textValue.slice(this.props.caretPos)}`;\r\n        this.props.caretPos += 4;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    this.addInTextArea(this.props.textValue);\r\n    this.setCursorPosition(document.querySelector('.textarea'));\r\n  }\r\n\r\n  addInTextArea(value) {\r\n    this.elements.textarea.value = value || '';\r\n    document.querySelector('textarea').value = this.elements.textarea.value;\r\n  }\r\n\r\n  getCursorPosition(element) {\r\n    if (document.selection) {\r\n      element.focus();\r\n      const sel = document.selection.createRange();\r\n      sel.moveStart('character', -element.value.length);\r\n      this.props.caretPos = sel.text.length;\r\n    } else if (element.selectionStart || element.selectionStart === '0') {\r\n      this.props.caretPos = element.selectionStart;\r\n    } else if (!element.selectionStart || element.selectionStart !== '0') {\r\n      this.props.caretPos = 0;\r\n    }\r\n    return this.props.caretPos;\r\n  }\r\n\r\n  setCursorPosition(element) {\r\n    if (element.setSelectionRange) {\r\n      element.focus();\r\n      element.setSelectionRange(this.props.caretPos, this.props.caretPos);\r\n    } else if (element.createTextRange) {\r\n      const range = element.createTextRange();\r\n      range.collapse(true);\r\n      range.moveEnd('character', this.props.caretPos);\r\n      range.moveStart('character', this.props.caretPos);\r\n      range.select();\r\n    }\r\n  }\r\n\r\n  doubleSpace() {\r\n    const delta = 500;\r\n    if (this.props.firstSpacePressTime === 0 && this.props.secondSpacePressTime === 0) {\r\n      this.props.firstSpacePressTime = new Date().getTime();\r\n    } else if (this.props.firstSpacePressTime !== 0 && this.props.secondSpacePressTime === 0) {\r\n      this.props.secondSpacePressTime = new Date().getTime();\r\n      if (this.props.secondSpacePressTime - this.props.firstSpacePressTime <= delta) {\r\n        this.getCursorPosition(document.querySelector('.textarea'));\r\n        this.props.textValue = `${this.props.textValue.slice(0, this.props.caretPos - 1)}.${this.props.textValue.slice(this.props.caretPos)}`;\r\n        this.addInTextArea(this.props.textValue);\r\n        this.props.caretPos += 0;\r\n        this.setCursorPosition(document.querySelector('.textarea'));\r\n        this.props.firstSpacePressTime = 0;\r\n        this.props.secondSpacePressTime = 0;\r\n      } else {\r\n        this.setCursorPosition(document.querySelector('.textarea'));\r\n        this.props.firstSpacePressTime = new Date().getTime();\r\n        this.props.secondSpacePressTime = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  shiftCtrlPushed() {\r\n    const keyShiftLeft = document.getElementById('ShiftLeft');\r\n    const keyControlLeft = document.getElementById('ControlLeft');\r\n    if (keyShiftLeft.classList.contains('active') && keyControlLeft.classList.contains('active')) {\r\n      this.changeLanguage();\r\n      this.props.pressed = [];\r\n    }\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://virtual-keyboard/./src/class.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _class__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./class */ \"./src/class.js\");\n\r\n\r\nwindow.onload = function load() {\r\n  const virtualKeyboard = new _class__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n  virtualKeyboard.setLanguage();\r\n  virtualKeyboard.render();\r\n  virtualKeyboard.pushedKeys();\r\n};\r\n\n\n//# sourceURL=webpack://virtual-keyboard/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;